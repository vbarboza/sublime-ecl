<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>ecl</string>
	</array>
	<key>name</key>
	<string>ECL</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#expression</string>
		</dict>
		<dict>
			<key>match</key>
			<string>#\b(?i)append|break|declare|demangle|end|for|getdatatype|if|inmodule|loop|mangle|onwarning|option|set|stored|uniquename|workunit(?-i)\b</string>
			<key>name</key>
			<string>keyword.control.ecl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i)real(?-i)(4|8)\b</string>
			<key>name</key>
			<string>storage.type.ecl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i)(u?)decimal(\d+(_\d+)?)\b</string>
			<key>name</key>
			<string>storage.type.ecl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\bU(?='.*')</string>
			<key>name</key>
			<string>storage.type.ecl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(integer|unsigned))[1-8]\b</string>
			<key>name</key>
			<string>storage.type.ecl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(data|string|qstring|varstring|varunicode|unicode))\d+\b</string>
			<key>name</key>
			<string>storage.type.ecl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(ascii|big_endian|boolean|data|decimal|ebcdic|grouped|integer|linkcounted|pattern|qstring|real|record|rule|set of|streamed|string|token|udecimal|unicode|unsigned|varstring|varunicode))\b</string>
			<key>name</key>
			<string>storage.type.ecl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)[A-Za-z_]+(?!=\bmodule\()(?=\))</string>
			<key>name</key>
			<string>entity.other.inherited-class.ecl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(and|or|in|not|all|any|as|from|atmost|before|beginc|best|between|case|const|counter|csv|descend|embed|encrypt|end|endc|endembed|endmacro|enum|except|exclusive|expire|export|extend|fail|few|first|flat|full|function|functionmacro|group|heading|hole|ifblock|import|in|joined|keep|keyed|last|left|limit|load|local|locale|lookup|macro|many|maxcount|maxlength|min skew|module|interface|named|nocase|noroot|noscan|nosort|of|only|opt|outer|overwrite|packed|partition|penalty|physicallength|pipe|quote|record|repeat|return|right|rows|scan|self|separator|service|shared|skew|skip|sql|store|terminator|thor|threshold|token|transform|trim|type|unicodeorder|unsorted|validate|virtual|whole|wild|within|xml|xpath|after|cluster|compressed|compression|default|encoding|escape|fileposition|forward|grouped|inner|internal|linkcounted|literal|little_endian|lzw|mofn|multiple|namespace|nocase|wnotrim|noxpath|onfail|overwrite|prefetch|retry|right1|right2|rowset|xpath|scope|smart|soapaction|stable|timelimit|timeout|unordered|unstable|update|use|width|__compressed__))\b</string>
			<key>name</key>
			<string>keyword.other.ecl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(module(?=\(.*\))))\b</string>
			<key>name</key>
			<string>keyword.other.ecl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(import|as|checkpoint|deprecated|failcode|failmessage|failure|global|independent|onwarning|persist|priority|recovery|stored|success|wait|when))\b</string>
			<key>name</key>
			<string>keyword.control.ecl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(:=|and|not|or|in|&gt;|&lt;|&lt;&gt;|/|\|+|-|=))\b</string>
			<key>name</key>
			<string>keyword.operator.ecl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(std)(.(file|date|str|math|metaphone|metaphone3|uni|audit|blas|system)(.(debug|email|job|log|thorlib|util|workunit))*)*)\b</string>
			<key>name</key>
			<string>support.class.ecl</string>
		</dict>
		<dict>
			<key>match</key>
			<string>([A-Za-z_]+)\s*(\()</string>
			<key>name</key>
			<string>entity.name.function.ecl</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>array-literal</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.ecl</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.ecl</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.array.literal.ecl</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>boolean-literal</key>
		<dict>
			<key>match</key>
			<string>\b(?i:(false|true))\b</string>
			<key>name</key>
			<string>constant.language.boolean.ecl</string>
		</dict>
		<key>comment</key>
		<dict>
			<key>name</key>
			<string>comment.ecl</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment-block-doc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment-line</string>
				</dict>
			</array>
		</dict>
		<key>comment-block</key>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.ecl</string>
		</dict>
		<key>comment-block-doc</key>
		<dict>
			<key>begin</key>
			<string>/\*\*(?!/)</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.documentation.ecl</string>
		</dict>
		<key>comment-line</key>
		<dict>
			<key>match</key>
			<string>(//).*$\n?</string>
			<key>name</key>
			<string>comment.line.ecl</string>
		</dict>
		<key>expression</key>
		<dict>
			<key>name</key>
			<string>meta.expression.ecl</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
			</array>
		</dict>
		<key>functions</key>
		<dict>
			<key>match</key>
			<string>\b(?i:(abs|acos|aggregate|allnodes|apply|ascii|asin|asstring|atan|atan2|ave|case|catch|choose|choosen|choosesets|clustersize|combine|correlation|cos|cosh|count|covariance|cron|dataset|dedup|define|denormalize|dictionary|distribute|distributed|distribution|ebcdic|enth|error|evaluate|event|eventextra|eventname|exists|exp|failcode|failmessage|fetch|fromunicode|fromxml|getenv|getisvalid|global|graph|group|hash|hash32|hash64|hashcrc|hashmd5|having|httpcall|httpheader|if|iff|index|intformat|isvalid|iterate|join|keyunicode|length|library|limit|ln|local|log|loop|map|matched|matchlength|matchposition|matchtext|matchunicode|max|merge|mergejoin|min|nofold|nolocal|nonempty|normalize|parse|pipe|power|preload|process|project|pull|random|range|rank|ranked|realformat|recordof|regexfind|regexreplace|regroup|rejected|rollup|round|roundup|row|rowdiff|sample|set|sin|sinh|sizeof|soapcall|sort|sorted|sqrt|stepped|stored|sum|table|tan|tanh|thisnode|topn|tounicode|toxml|transfer|transform|trim|truncate|typeof|ungroup|unicodeorder|variance|which|workunit|xmldecode|xmlencode|xmltext|xmlunicode))\b</string>
			<key>name</key>
			<string>entity.name.function.ecl</string>
		</dict>
		<key>functions2</key>
		<dict>
			<key>match</key>
			<string>\b(?i:(apply|assert|build|buildindex|evaluate|fail|keydiff|keypatch|loadxml|nothor|notify|output|parallel|sequential|soapcall|wait))\b</string>
			<key>name</key>
			<string>entity.name.function.ecl</string>
		</dict>
		<key>literal</key>
		<dict>
			<key>name</key>
			<string>literal.ecl</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#numeric-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#boolean-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#self-literal</string>
				</dict>
			</array>
		</dict>
		<key>numeric-literal</key>
		<dict>
			<key>match</key>
			<string>\b(?&lt;=[^$])((0(x|X)[0-9a-fA-F]+)|(0(o|O)[0-7]+)|(0(b|B)(0|1)+)|(([0-9]+(\.[0-9]+)?))([eE]([+-]?)[0-9]+(\.[0-9]+)?)?)\b</string>
			<key>name</key>
			<string>constant.numeric.ecl</string>
		</dict>
		<key>qstring-single</key>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>end</key>
			<string>\'|(?:[^\\\n]$)</string>
			<key>name</key>
			<string>string.single.ecl</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>self-literal</key>
		<dict>
			<key>match</key>
			<string>\b(?i:(self))\b</string>
			<key>name</key>
			<string>constant.language.this.ecl</string>
		</dict>
		<key>string</key>
		<dict>
			<key>name</key>
			<string>string.ecl</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#qstring-single</string>
				</dict>
			</array>
		</dict>
		<key>string-character-escape</key>
		<dict>
			<key>match</key>
			<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)</string>
			<key>name</key>
			<string>constant.character.escape.ecl</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.ecl</string>
	<key>uuid</key>
	<string>8AE6478E-6717-4D6B-A1B4-0CB197840137</string>
</dict>
</plist>
